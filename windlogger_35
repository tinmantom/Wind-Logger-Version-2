
/********************************************************
/****** Wind Logger based upon the:  ********************
/****** DataDuino - Arduino DAQ UNIT ********************
/****** by Matt Little & Tom Dixon **********************
/****** Date: 29/1/2014 *********************************
/****** info@re-innovation.co.uk ************************
/****** tomd@v3power.co.uk*******************************
/********************************************************

  See www.re-innovation.co.uk for information and construction details

/*************Details of Code*****************************

  The DataDuino is an Arduino based SD card datalogger.
  A PCF8563 Realt Time Clock is used to timestamp the data.
  
  Pins D3 and D4 is set up to count pulses from a sensor (such as a anemometer or flow sensor)
  These are pulses are averaged into a wind speed
    
  Pin A1 is set up with a potential divider from the input voltage
  
  Pin A2 is set up to measure wind direction with a 10k resistor to GND (GND-10k-R vane-Vref)
      
  Pin D7 is used as an input to choose calibrate mode
  When in calibrate mode the serial port is read and sample/time/date can be updated
 
  Pins D8,D9 and D10 are used to switch a 4051 multiplex chip to route 8 analog sensor inputs to A3
 
  Pin D1 is used to send serial data to a RaspberryPi to post data to a remote server
  
  Each logger has a reference (user adjustable).
  
  Data is sampled every second then written to a .csv file created on an SD card every 10 minutes. 
  An open-energymonitor formatted serial line is sent every 10 minutes too
  A new file is created each day. If file alreay present then data is appended.
  The file name is created from the reference number and the date in the format:
  DXXXXXX.csv, where DXXXXXX is the date in the format DDMMYY. 
  
  Data is stored with human readable headers:
  "Reference, Time, Date, Wind Pulses, Direction, Temp, Humidity"

  // This will be added to a seperate 'calibrate' mode
  When in Calibrate mode:
  You can adjust the parameters of the device using serial commands. These parameters are stored in EEPROM.
  These are:
  T??????E
  This will change the time to HHMMSS
  D??????E
  This will change the date to DDMMYY
  S?????E
  This will change the sample period to ????? seconds. Set to 00001 for 1 second data, set to 03600 for 1 hour data.
  The minimum is 1 second data. The maximum is 99999 seconds
  
  // Added Interrupt code from here:
  // PinChangeIntExample, version 1.1 Sun Jan 15 06:24:19 CST 2012
  // See the Wiki at http://code.google.com/p/arduino-pinchangeint/wiki 
  // for more information.
 
  Updates: 
  30/10/12 Code written - Matt Little
  31/10/12 writing code description and sorting out new sample timings - Matt Little
  19/9/13  Getting code to work on Arduino 1.0.5 - Matt Little
  5/2/14   Adding wind logging sections - Matt Little
  5/2/14   Sorting out sleep modes - Matt Little
  5/2/14   Adding HIH humidity/temperature sensor - Matt Little
  5/2/14   Sorting out Card Detect when card removed - Matt Little
  10/2/14  Sorting out card re-enter issue - Matt Little
  17/6/14  Adding pull-up enable for calibrate pin.- Matt Little
  17/6/14  Removing humidity sensor routines. Not needed -  Matt Little
  17/6/14  Adding debounce timer for anemometer pulses - Matt Little
  17/6/14  Adding Direction vane input - Matt Little
  10/7/14  Adding additional Anemometer input - Matt Little
  10/7/14  Needs additional interrupt pin added - Matt Little
  1/8/14   Adding multiplex switching - Tom Dixon
  1/8/14   Adding Serial out string to post to emoncms server (via Raspberry Pi connected to D1) - Tom Dixon
  8/8/14   Removed temperature stuff - Tom Dixon
  8/8/14   Added (mess) wind direction bin code - Tom Dixon
  8/8/14   Added debounce code to pulsecount routines - Tom Dixon

  
 //*********SD CARD DETAILS***************************	
 The SD card circuit:
 SD card attached to SPI bus as follows:
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** CS - pin 10
 ** Card detect - pin 6
 
 //************ Real Time Clock code*******************
 A PCF8563 RTC is attached to pins:
 ** A4 - SDA (serial data)
 ** A5 - SDC (serial clock)
 ** D2 - Clock out - This gives a 1 second pulse to record the data
 
 RTC PCF8563 code details:
 By Joe Robertson, jmr
 orbitalair@bellsouth.net
 
**********************************************************************************************************/

/************ External Libraries*****************************/

#include <stdlib.h>
#include <Wire.h>          // Required for RTC
#include <Rtc_Pcf8563.h>   // RTC library
#include <SdFat.h>            // SD card library
#include <avr/pgmspace.h>  // Library for putting data into program memory
#include <EEPROM.h>        // For writing values to the EEPROM
#include <avr/eeprom.h>
#include <avr/sleep.h>
#include <avr/power.h>
#include <PinChangeInt.h>  // For additional interrupts

/************User variables and hardware allocation**********************************************/

/******* SD CARD*************/
#define chipSelect 10 // The SD card Chip Select pin 10
#define cardDetect 6  // The SD card detect is on pin 6
// The other SD card pins (D11,D12,D13) are all set within SD.h
int cardDetectOld = LOW;  // This is the flag for the old reading of the card detect

// SD file system object
SdFat sd;
SdFile datafile;

String dataString; //This is the holder for the data to be writen to SD as a string. Start as blank
String dataRtString ; //Realtime version of the data string (not cumulative)

int counter = 0; //Clue is in the name - it goes up every time we take a set of readings
int counterMax = 600; //Number of samples before averaging and commiting to SD card (and Emoncms) - wind projects this should be 600
long dataCounter = 0; 

/*************Real Time Clock*******/
Rtc_Pcf8563 rtc;
#define I2C_RTC 0x51 // 7 bit address (without last bit - look at the datasheet)
#define RTCinterrupt 0  // RTC interrupt - This is pin 2 of ardunio - which is INT0

/************* Pulse counter *******/
#define pulseInterrupt 1  // Pulse Counter Interrupt - This is pin 3 of arduino - which is INT1
#define ANEMOMETER1 3  //   This is digital pin the pulse is attached to
#define ANEMOMETER2 4  //   This is digital pin the pulse is attached to

/********* I/O Pins *************/
#define calibrate 7   // This controls if we are in serial calibrate mode or not
#define batteryPin A1  // For monitoring the battery voltage
#define directionPin A2  // For monitoring the wind direction
#define Muxz A3  //Output from 4051 mux to take 8 analog inputs

int select[] = {9, 8, 5}; //Pins connected to 4051 pins S0, S1 and S2 respectivly note using D5 requires l.e.d. to be removed from DataDuino and wind shield

/********** Wind Direction Storage *************/
int windDirection = 0;  // Empty to start with
int windDirectionTot[9] = {0};
String WindDirectionStr;

///********* Battery Voltage ****************/
float batteryVoltage;        // Temporary store for float
char BatteryVoltStr[5];      // Hold the battery voltage as a string
// ****** Serial Data Read***********
// Variables for the serial data read
char inByte;         // incoming serial char
String str_buffer = "";  // This is the holder for the string which we will display

//********Variables for the Filename*******************

char filename[] = "DXXXXXX.csv";  // This is a holder for the full file name
char deviceID[3]; // A buffer to hold the device ID

long sampleTime = 2;  // This is the time between samples for the DAQ
                      // Sample time is stored in EEPROM in locations 2 & 3

// Variables for the Pulse Counter
volatile long pulseCounter1 = 0;  // This counts pulses from the flow sensor  - Needs to be long to hold number
volatile long pulseCounter1Old = 0;  // This is storage for the old flow sensor - Needs to be long to hold number

volatile long pulseCounter2 = 0;  // This counts pulses from the flow sensor  - Needs to be long to hold number
volatile long pulseCounter2Old = 0;  // This is storage for the old flow sensor - Needs to be long to hold number

volatile unsigned long ContactTime1; //Timer to avoid contact bounce in interrupt routine
volatile unsigned long ContactTime2; //Timer to avoid contact bounce in interrupt routine
volatile boolean writedataflag = HIGH;  // A flag to tell the code when to write data

// Varibales for writing to EEPROM
int hiByte;      // These are used to store longer variables into EERPRPROM
int loByte;

// These next ints are for the filename conversion
int day_int =0;      // To find the day from the Date for the filename
int day_int1 =0;
int day_int2 =0;
int month_int = 0;
int month_int1 = 0;
int month_int2 = 0;
int year_int = 0;  // Year
int hour_int = 0;
int min_int = 0;
int sec_int = 0;

boolean calibrateFlag = HIGH;  // This flag is lowered if we are in calibrate mode (switch ON)
boolean debugFlag = HIGH;    // Set this if you want to be in debugging mode.

//**********STRINGS TO USE****************************
String comma = ",";
String date;        // The stored date from filename creation
String newdate;     // The new date, read every time 

// These are Char Strings - they are stored in program memory to save space in data memory
// These are a mixutre of error messages and serial printed information
const char headers[] PROGMEM = "Reference, Date, Time, Wind1, Wind2, Direction, Battery Voltage, A1, A2, A3, A4, A5, A6, A7, A8,";  // Headers for the top of the file
const char headersOK[] PROGMEM = "Headers OK";
const char erroropen[] PROGMEM = "Error opening file";
const char error[] PROGMEM = "ERROR ERROR ERROR";
const char initialisesd[] PROGMEM = "Initialising SD card...";
const char dateerror[] PROGMEM = "Dates are not the same - create new file";
const char reference[] PROGMEM = "The ref number is:";
const char noSD[] PROGMEM = "No SD card present";

#define MAX_STRING 100      // Sets the maximum length of string probably could be lower
char stringBuffer[MAX_STRING];  // A buffer to hold the string when pulled from program memory

//**************Thing's we'll write to the SD card****************

    long AnalogOneTot = 0;
    long AnalogTwoTot = 0;
    long AnalogThreeTot = 0;
    long AnalogFourTot = 0;
    long AnalogFiveTot = 0;
    long AnalogSixTot = 0;
    long AnalogSevenTot = 0;
    long AnalogEightTot = 0;
    long pulseCounter1Tot = 0;
    long pulseCounter2Tot = 0;
    long batteryVoltageTot = 0;

/***************************************************
 *  Name:        pulse1
 *
 *  Returns:     Nothing.
 *
 *  Parameters:  None.
 *
 *  Description: Count pulses from Anemometer 1
 *
 ***************************************************/
void pulse1(void)
{
  
 // if ((millis() - ContactTime1) > 15) {  //debounce of REED contact. With 15ms speed of more than 150km/h can be measured
  // Increment the pulse counter
  pulseCounter1++;
//  ContactTime1 = millis();
//}
  
}

/***************************************************
 *  Name:        pulse2
 *
 *  Returns:     Nothing.
 *
 *  Parameters:  None.
 *
 *  Description: Count pulses from Anemometer 2
 *
 ***************************************************/
void pulse2(void)
{
  
//  if ((millis() - ContactTime2) > 15) {  //debounce of REED contact. With 15ms speed of more than 150km/h can be measured
  //Increment the pulse counter
  pulseCounter2++;
 // ContactTime2 = millis();
//}
  
}



/***************************************************
 *  Name:        RTC
 *
 *  Returns:     Nothing.
 *
 *  Parameters:  None.
 *
 *  Description: I use the CLK_OUT from the RTC to give me exact 1Hz signal
 *               To do this I changed the initialise the RTC with the CLKOUT at 1Hz
 *
 ***************************************************/
void RTC()
{ 
  
  detachInterrupt(RTCinterrupt);
  dataCounter++;
  
  if(writedataflag==LOW&&dataCounter>=sampleTime)  // This stops us loosing data if a second is missed
  { 
    // If this interrupt has happened then we want to write data to SD card:
    // Save the pulsecounter value (this will be stored to write to SD card
    pulseCounter1Old = pulseCounter1;
    pulseCounter2Old = pulseCounter2;
   // Reset the pulse counter
    pulseCounter1 = 0;
    pulseCounter2 = 0;
    // Reset the DataCounter
    dataCounter = 0;  
    // Set the writedataflag HIGH
    writedataflag=HIGH;
//Serial.println();  
}
}


/***************************************************
 *  Name:        enterSleep
 *
 *  Returns:     Nothing.
 *
 *  Parameters:  None.
 *
 *  Description: Enters the arduino into sleep mode.
 *
 ***************************************************/
void enterSleep(void)
{

  attachInterrupt(RTCinterrupt, RTC, RISING);
  
  sleep_enable();
   
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);  
  
  byte old_ADCSRA = ADCSRA;  // Store the old value to re-enable 
  // disable ADC
  ADCSRA = 0;

  byte old_PRR = PRR;  // Store previous version on PRR
  // turn off various modules
  PRR = 0b11111111;
  
  sleep_cpu();
  /* The program will continue from here. */
  /************* ASLEEP *******************/
  
  // ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ //
  
  /************** WOKEN UP ***************/
  /* First thing to do is disable sleep. */
  sleep_disable();
  
  // turn ON various modules USART and ADC
  PRR = old_PRR;  
  
  // enable ADC
  ADCSRA = old_ADCSRA;  
}


/***************************************************
 *  Name:        setup
 *
 *  Returns:     Nothing.
 *
 *  Parameters:  None.
 *
 *  Description: Setup for the Arduino.           
 *
 ***************************************************/
 
void setup()
{
  Serial.begin(9600);    // Set up a serial output for data display and changing parameters
  Wire.begin();
  //******Real Time Clock Set - up********
  // A4 and A5 are used as I2C interface.
  // D2 is connected to CLK OUT from RTC. This triggers an interrupt to take data
  // We need to enable pull up resistors
  pinMode(A4, INPUT);           // set pin to input
  digitalWrite(A4, HIGH);       // turn on pullup resistors
  pinMode(A5, INPUT);           // set pin to input
  digitalWrite(A5, HIGH);       // turn on pullup resistors
  pinMode(2,INPUT);    // Set D2 to be an input for the RTC CLK-OUT   
  //initialise the real time clock
  Rtc_Pcf8563 rtc; 
   

  pinMode(cardDetect,INPUT);  // D6 is the SD card detect on pin 6.
  
  //Set up digital data lines
  pinMode(calibrate,INPUT_PULLUP);
  
    //Multiplexing select pins
    pinMode(select[0], OUTPUT); //set out pin for4051 S0 
    pinMode(select[1], OUTPUT); //set out pin for4051 S1  
    pinMode(select[2], OUTPUT); //set out pin for4051 S2
      
  // Battery voltage sensing
  pinMode(batteryPin,INPUT);
  
   //Set up direction input for wind vane
  pinMode(directionPin,INPUT); 
  
  pinMode(A3,INPUT);
     
  setupRTC();  // Initialise the real time clock  
  initialiseSD(); //Initialisethe SD card
  createfilename(); //Create correct filename (from date)
  
  
  // Read the reference number from the EEROM
  deviceID[0] = char(EEPROM.read(0));
  deviceID[1] = char(EEPROM.read(1));
  
  // Read in the sample time from EEPROM
  hiByte = EEPROM.read(2);
  loByte = EEPROM.read(3);
  sampleTime = (hiByte << 8)+loByte;  // Get the sensor calibrate value 
  
  analogReference(EXTERNAL);  // This should be default, but just to be sure

  // Interrupt for the 1Hz signal from the RTC
  attachInterrupt(RTCinterrupt, RTC, RISING); 
  // Attach interrupts for the pulse counting
  pinMode(ANEMOMETER1, INPUT); 
  digitalWrite(ANEMOMETER1, HIGH);
  PCintPort::attachInterrupt(ANEMOMETER1, &pulse1, FALLING);  // add more attachInterrupt code as required
  pinMode(ANEMOMETER2, INPUT); 
  digitalWrite(ANEMOMETER2, HIGH);
  PCintPort::attachInterrupt(ANEMOMETER2, &pulse2, FALLING);  
}



/***************************************************
 *  Name:        main loop
 *
 *  Returns:     Nothing.
 *
 *  Parameters:  None.
 *
 *  Description: Main application loop.
 *
 ***************************************************/
void loop()
{

  // If the RTC has given us an interrupt then we need to write the data
  // Also want to make sure that there is an SD card present
  if(writedataflag==HIGH)
  {
    
    //Start taking readings
    counter++;
 //  Serial.println(counter);
    
    windDirection = (analogRead(A2));  
    
// ******** CALC DIRECTION *********
// This routine takes in an analog read value and converts it into a wind direction
// The Wind vane uses a series of resistors to show what direction the wind comes from
// The different values are:
//    R1 = 33k  => 238 N   1
//    R2 = 8.2k => 562 NE  2 
//    R3 = 1k => 930 E     3 
//    R4 = 2.2k => 839 SE  4
//    R5 = 3.9k => 736 S   5
//    R6 = 16k => 394 SW   6
//    R7 = 120k => 79 W    7
//    R8 = 64.9k => 137 NW 8
// This means we can 'band' the data into 8 bands

 // We'll actually use 9 bands as zero might be confusing

  if(windDirection>0&&windDirection<100)
  {
    WindDirectionStr = ("W");
    windDirectionTot[6] = windDirectionTot[6] + 1;
  }
  else if(windDirection>100&&windDirection<200)
  {
     WindDirectionStr = ("NW");
    windDirectionTot[7] = windDirectionTot[7] + 1;
  }
  else if(windDirection>200&&windDirection<350)
  {
     WindDirectionStr = ("N");
    windDirectionTot[8] = windDirectionTot[8] + 1;
  }
  else if(windDirection>350&&windDirection<450)
  {
     WindDirectionStr = ("SW");
    windDirectionTot[5] = windDirectionTot[5] + 1;
  }  
  else if(windDirection>450&&windDirection<650)
  {
     WindDirectionStr = ("NE");
    windDirectionTot[1] = windDirectionTot[1] + 1;
  }  
  else if(windDirection>650&&windDirection<800)
  {
     WindDirectionStr = ("S");
    windDirectionTot[4] = windDirectionTot[4] + 1;
  }
  else if(windDirection>800&&windDirection<900)
  {
     WindDirectionStr = ("SE");
    windDirectionTot[3] = windDirectionTot[3] + 1;
  }
  else if(windDirection>900&&windDirection<1024)
  {
     WindDirectionStr = ("E");
    windDirectionTot[2] = windDirectionTot[2] + 1; 
  }
  else
  {
    WindDirectionStr = ("X"); //no wind vane connected
  }

//  }
    
    
    // *********** BATTERY VOLTAGE ***************************************

    batteryVoltage = float(analogRead(batteryPin))*(5/1024.0)*13.2;        // Temporary store for float
    dtostrf(batteryVoltage,2,1,BatteryVoltStr);     // Hold the battery voltage as a string
    int batteryAnalog = analogRead(batteryPin);
    
    // Get inputs, via smoothing loops
    //My smoothing code is not pretty, or clever, but is necessary to achive stable readings from the current sensors
    long AnalogOneSum = 0;
    long AnalogTwoSum = 0;
    long AnalogThreeSum = 0;
    long AnalogFourSum = 0;
    long AnalogFiveSum = 0;
    long AnalogSixSum = 0;
    long AnalogSevenSum = 0;
    long AnalogEightSum = 0;
    
    //We're going to scan through the 4051 select pins, taking samples from each sensor
    //then we take readings from the other analog pins. 
    //We do this 100 times for averaging them and commit them to the 1 Hz sample
    //***TO DO - There is DEFINATELY a more clever way of scanning through the pins!
    
    //for (int i=0; i<100; i++) 
    // {
      
    
    digitalWrite(select[0], LOW);
    digitalWrite(select[1], LOW);
    digitalWrite(select[2], LOW);
    
    for (int i=0; i<100; i++) 
    {
    AnalogOneSum += analogRead(A3);
    }
    long AnalogOneRaw = AnalogOneSum / 100;
    
    digitalWrite(select[0], HIGH);

    for (int i=0; i<100; i++) 
    {
    AnalogTwoSum += analogRead(A3);
    }
    
    long AnalogTwoRaw = AnalogTwoSum / 100;
    
    
    digitalWrite(select[0], LOW);
    digitalWrite(select[1], HIGH);

    for (int i=0; i<100; i++) 
    {
    AnalogThreeSum += analogRead(A3);
    }
    long AnalogThreeRaw = AnalogThreeSum / 100;
    
    digitalWrite(select[1], HIGH);
    digitalWrite(select[0], HIGH);

    for (int i=0; i<100; i++) 
    {
    AnalogFourSum += analogRead(A3);
    }
    long AnalogFourRaw = AnalogFourSum / 100;

    digitalWrite(select[0], LOW);
    digitalWrite(select[1], LOW);
    digitalWrite(select[2], HIGH);

    for (int i=0; i<100; i++) 
    {
    AnalogFiveSum += analogRead(A3);
    }
    long AnalogFiveRaw = AnalogFiveSum / 100;
    
    digitalWrite(select[0], HIGH);

    for (int i=0; i<100; i++) 
    {
    AnalogSixSum += analogRead(A3);
    }
    long AnalogSixRaw = AnalogSixSum / 100;
    
    digitalWrite(select[0], LOW);
    digitalWrite(select[1], HIGH);

    for (int i=0; i<100; i++) 
    {
    AnalogSevenSum += analogRead(A3);
    }
    long AnalogSevenRaw = AnalogSevenSum / 100;
    
    digitalWrite(select[0], HIGH);

    for (int i=0; i<100; i++) 
    {
    AnalogEightSum += analogRead(A3);
    }
    long AnalogEightRaw = AnalogEightSum / 100;
    
    //We add these readings to the totals for each variable to create our ten minute averaging   
    
     AnalogOneTot += (AnalogOneRaw);
     
     AnalogTwoTot += (AnalogTwoRaw);
     AnalogThreeTot += (AnalogThreeRaw);
     AnalogFourTot += (AnalogFourRaw);
     AnalogFiveTot += (AnalogFiveRaw);
     AnalogSixTot += (AnalogSixRaw);
     AnalogSevenTot += (AnalogSevenRaw);
     AnalogEightTot += (AnalogEightRaw);
     batteryVoltageTot += (batteryVoltage);
     pulseCounter1Tot += pulseCounter1Old;
     pulseCounter2Tot += pulseCounter2Old;
     
     
     
    newdate = String(rtc.formatDate(RTCC_DATE_WORLD));  
    if(newdate != date)
    {
       // If date has changed then create a new file
       //Serial.println(getString(dateerror)); 
       createfilename();  // Create the corrct filename (from date)
    } 
 
    //Create Realtime datastring
    dataRtString = 0; 
    /**
    dataRtString += String(rtc.formatTime());
    dataRtString += comma;
    dataRtString += String(pulseCounter1Old);  // Store the number of pulses from the previous second
    dataRtString += comma;
    dataRtString += String(pulseCounter2Old);  
    dataRtString += comma;
    dataRtString += WindDirectionStr;
    dataRtString += comma;
    dataRtString += String(BatteryVoltStr);  
    dataRtString += comma;
    dataRtString += (AnalogOneRaw);  //First of multiplexed inputs
    dataRtString += comma;
    dataRtString += (AnalogTwoRaw);  
    dataRtString += comma;
    dataRtString += (AnalogThreeRaw);  
    dataRtString += comma;
    dataRtString += (AnalogFourRaw);  
    dataRtString += comma;
    dataRtString += (AnalogFiveRaw);  
    dataRtString += comma;
    dataRtString += (AnalogSixRaw);  
    dataRtString += comma;
    dataRtString += (AnalogSevenRaw);  
    dataRtString += comma;
    dataRtString += (AnalogEightRaw);  
    dataRtString += comma;
**/

    // Here we create a data string to write
    // Subtracting '0' converts from ASCII to real number
    // The headers are: "ID,Time,Pulses1,Pulses2,WindDir,Voltage,Analog1,Analog2...Analog8"
      int maxIndex = 0;
  int max = windDirectionTot[maxIndex];
  for (int i=0; i<9; i++)
  {
    if (max<windDirectionTot[i])
    {
      max = windDirectionTot[i];
      maxIndex = i;
    }
  }        
                    


    dataString =  String(deviceID[1]);
    dataString += comma;
    dataString += newdate;
    dataString += comma;
    dataString += String(rtc.formatTime());
    dataString += comma;
    dataString += (pulseCounter1Tot);  // Store the number of pulses from the previous second
    dataString += comma;
    dataString += (pulseCounter2Tot);  
    dataString += comma;
    dataString += (maxIndex);
    dataString += comma;
    dataString += (batteryVoltageTot); 
    dataString += comma;
    dataString += (AnalogOneTot);  
    dataString += comma;
    dataString += (AnalogTwoTot);  
    dataString += comma;
    dataString += (AnalogThreeTot);  
    dataString += comma;
    dataString += (AnalogFourTot);  
    dataString += comma;
    dataString += (AnalogFiveTot);  
    dataString += comma;
    dataString += (AnalogSixTot);  
    dataString += comma;
    dataString += (AnalogSevenTot);  
    dataString += comma;
    dataString += (AnalogEightTot);  
//    dataString += comma;          
 
      // ************** Write it to the SD card *************
    // This depends upon the card detect.
    // If card is there then write to the file
    // If card has recently been inserted then initialise the card/filenames
    // If card is not there then flash LEDs

    if(digitalRead(cardDetect)==LOW&&cardDetectOld==HIGH)
    {
      delay(100); //Wait for switch to settle down.
      // There was no card previously so re-initialise and re-check the filename
      initialiseSD();
      createfilename();
    }
    
    if(digitalRead(cardDetect)==LOW&&cardDetectOld==LOW)
    {
      //Ensure that there is a card present)
      // We then write the data to the SD card here:
      
      //Since we're doing ten minute averaging we only write to the SD card every 600th sample
      //Every 600th sample we'll also write to the serial in a format Emoncms understands
      //Every sample (1Hz) goes over serial to allow for easy sensor calibration
      
      if(counter >= counterMax)  //600 samples equates to 10 minutes so lets dump it to SD and reset everything 
        {
          counter = 0;
          
    Serial.print("5"); //write to node 5 - the first energy data channel
    Serial.print(" "); //We leave spaces between the node number and the data - emoncms works the rest out!
    Serial.print(pulseCounter1Tot);
    Serial.print(" "); //spaces seperate the data fields
    Serial.print(pulseCounter2Tot);
    Serial.print(" ");
    Serial.print(maxIndex); //highest scoring wind direction bin
    Serial.print(" ");
    Serial.print(batteryVoltageTot);
    Serial.print(" ");
    Serial.print(AnalogOneTot);
    Serial.print(" ");
    Serial.print(AnalogTwoTot);
    Serial.print(" ");
    Serial.print(AnalogThreeTot);
    Serial.print(" ");
    Serial.print(AnalogFourTot);
    Serial.print(" ");
    Serial.print(AnalogFiveTot);
    Serial.print(" ");
    Serial.print(AnalogSixTot);
    Serial.print(" ");
    Serial.print(AnalogSevenTot);
    Serial.print(" ");
    Serial.print(AnalogEightTot);
    Serial.println(" "); 
       
 writetoSD();    
   
  }
      else 
        {
  //  Serial.println(dataRtString); //if the maxCounter hasn't been reached (600 seconds) we'll just pop it out over serial to help calibration
        
    Serial.print("5"); //write to node 5 - the first energy data channel
    Serial.print(" "); //We leave spaces between the node number and the data - emoncms works the rest out!
    Serial.print(counter);
    Serial.print(" ");
    Serial.print(pulseCounter1Old);
    Serial.print(" "); //spaces seperate the data fields
    Serial.print(pulseCounter2Old);
    Serial.print(" ");
    Serial.print(WindDirectionStr); //highest scoring wind direction bin
    Serial.print(" ");
    Serial.print(BatteryVoltStr);
    Serial.print(" ");
    Serial.print(AnalogOneRaw);
    Serial.print(" ");
    Serial.print(AnalogTwoRaw);
    Serial.print(" ");
    Serial.print(AnalogThreeRaw);
    Serial.print(" ");
    Serial.print(AnalogFourRaw);
    Serial.print(" ");
    Serial.print(AnalogFiveRaw);
    Serial.print(" ");
    Serial.print(AnalogSixRaw);
    Serial.print(" ");
    Serial.print(AnalogSevenRaw);
    Serial.print(" ");
    Serial.print(AnalogEightRaw);
    Serial.println(" "); 
    
        dataRtString = 0;
         
      }     
        
    }
    else
    {
       Serial.println(getString(noSD));
    }
    cardDetectOld = digitalRead(cardDetect);  // Store the old value of the card detect
    
    writedataflag=LOW;    // Reset the write data flag
    Serial.flush();
 
  }

  // Want to check the SD card every second
  
  if(digitalRead(cardDetect)==HIGH)
  {
    // This meands there is no card present so flash the LED every second
    for(int x=0;x<=5;x++)
    {
   //   digitalWrite(LEDred, HIGH);   // set the LED ON
      delay(5);
 //     digitalWrite(LEDred, LOW);   // set the LED ON
      delay(50);     
    }
  }
  
  
  // A Switch on D7 will set if the unit is in serial adjust mode or not    
  if(digitalRead(calibrate)==LOW)
  {    
    // We ARE in calibrate mode
    Serial.println("Calibrate");    
    getData();
    delay(500);  // Some time to read data
    Serial.flush();    // Force out the end of the serial data
  
    // Reset all the data collection values
    pulseCounter1 = 0;
    pulseCounter2 = 0;
    dataCounter = 0;  
    writedataflag=LOW;
  }
  else
  {     
    attachInterrupt(RTCinterrupt, RTC, RISING); 
    enterSleep();     
  }

}


// Set Up RTC routine
void setupRTC()
{
    // This section configures the RTC to have a 1Hz output.
  // Its a bit strange as first we read the data from the RTC
  // Then we load it back again but including the correct second flag  
  rtc.formatDate(RTCC_DATE_WORLD);
  rtc.formatTime();
  
  year_int = rtc.getYear();
  day_int = rtc.getDay();
  month_int = rtc.getMonth();  
  hour_int = rtc.getHour();
  min_int = rtc.getMinute();
  sec_int = rtc.getSecond(); 
  
  Wire.begin(); // Initiate the Wire library and join the I2C bus as a master
  Wire.beginTransmission(I2C_RTC); // Select RTC
  Wire.write(0);        // Start address
  Wire.write(0);     // Control and status 1
  Wire.write(0);     // Control and status 2
  Wire.write(DecToBcd(sec_int));     // Second
  Wire.write(DecToBcd(min_int));    // Minute
  Wire.write(DecToBcd(hour_int));    // Hour
  Wire.write(DecToBcd(day_int));    // Day
  Wire.write(DecToBcd(2));    // Weekday
  Wire.write(DecToBcd(month_int));     // Month (with century bit = 0)
  Wire.write(DecToBcd(year_int));    // Year
  Wire.write(0b10000000);    // Minute alarm (and alarm disabled)
  Wire.write(0b10000000);    // Hour alarm (and alarm disabled)
  Wire.write(0b10000000);    // Day alarm (and alarm disabled)
  Wire.write(0b10000000);    // Weekday alarm (and alarm disabled)
  Wire.write(0b10000011);     // Output clock frequency enabled (1 Hz) ***THIS IS THE IMPORTANT LINE**
  Wire.write(0);     // Timer (countdown) disabled
  Wire.write(0);     // Timer value
  Wire.endTransmission();
}


// Converts a decimal to BCD (binary coded decimal)
byte DecToBcd(byte value){
  return (value / 10 * 16 + value % 10);
}

//*********** FUNCTION TO INITIALISE THE SD CARD***************
void initialiseSD()
{
  // Initialize the SD card at SPI_HALF_SPEED to avoid bus errors 
  // We use SPI_HALF_SPEED here as I am using resistor level shifters.
  //if (!sd.begin(chipSelect, SPI_HALF_SPEED)) sd.initErrorHalt();
  
  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  pinMode(chipSelect, OUTPUT);
  
  // see if the card is present and can be initialized:
  if (!sd.begin(chipSelect, SPI_HALF_SPEED)) {
    if(debugFlag==HIGH)
    {
      Serial.println("FAIL");
    }
    // don't do anything more:
    // Want to turn on an ERROR LED here
    return;
  }
  else
  {
    if(debugFlag==HIGH)
    {
      Serial.println(getString(initialisesd));
    }
  }
}


// *********FUNCTION TO SORT OUT THE FILENAME**************
void createfilename()
{
  // Check there is a file created with the date in the title
  // If it does then create a new one with the new name
  // The name is created from:
  // DMMDDYY.CSV, where YY is the year MM is the month, DD is the day
  // You must add on the '0' to convert to ASCII
  
  date = String(rtc.formatDate());
  day_int = rtc.getDay();  // Get the actual day from the RTC
  month_int = rtc.getMonth();  // Get the month
  day_int1 = day_int/10;    // Find the first part of the integer
  day_int2 = day_int%10;    // Find the second part of the integer
  filename[1]=day_int1 + '0';  // Convert from int to ascii
  filename[2]=day_int2 + '0';  // Convert from int to ascii 
  month_int1 = month_int/10;    // Find the first part of the integer
  month_int2 = month_int%10;    // Find the second part of the integer
  filename[3]=month_int1 + '0';  // Convert from int to ascii
  filename[4]=month_int2 + '0';  // Convert from int to ascii   
  filename[5]=(year_int/10) + '0';  // Convert from int to ascii
  filename[6]=(year_int%10) + '0';  // Convert from int to ascii 
  
  if(debugFlag==HIGH)
  {
    Serial.println(filename);
  }
  
  if(!sd.exists(filename))
  {
    // open the file for write at end like the Native SD library
    if (!datafile.open(filename, O_RDWR | O_CREAT | O_AT_END)) {
      if(debugFlag==HIGH)
      {
        Serial.println(getString(erroropen));
      }
    }
    // if the file opened okay, write to it:
    datafile.println(getString(headers));
    // close the file:
    datafile.sync();
    if(debugFlag==HIGH)
    {
      Serial.println(getString(headersOK));
    }
  } 
  else
  {
    if(debugFlag==HIGH)
    {
      Serial.println("Filename exists");
    }
  }
  
}

// This routine writes the dataString to the SD card
void writetoSD()
{
  

    // Here we create a data string to write
    // Subtracting '0' converts from ASCII to real number
    // The headers are: "ID,Time,Pulses1,Pulses2,WindDir,Voltage,Analog1,Analog2...Analog8"
    
    
  datafile.open(filename, O_RDWR | O_CREAT | O_AT_END);    // Open the correct file
  // if the file is available, write to it:
  if (sd.exists(filename)) {
    delay(5);
    datafile.println(dataString);
    
    datafile.close();
    // print to the serial port too:
    Serial.println(dataString);
    
  }  
  // if the file isn't open, pop up an error:
  else {
    Serial.println(getString(erroropen));
  }
    //reset totals   
    AnalogOneTot = 0;
    AnalogTwoTot = 0;
    AnalogThreeTot = 0;
    AnalogFourTot = 0;
    AnalogFiveTot = 0;
    AnalogSixTot = 0;
    AnalogSevenTot = 0;
    AnalogEightTot = 0;
    batteryVoltageTot = 0;
    pulseCounter1Tot = 0;
    pulseCounter2Tot = 0;
    

int maxIndex = 0;    


//clear all the wind direction bin totals
int i=0;
 for (i=0; i<9; i++)
  {
  
windDirectionTot[i] = 0;
  } 

int max = 0;
}

// This routine pulls the string stored in program memory so we can use it
// It is temporaily stored in the stringBuffer
char* getString(const char* str) {
	strcpy_P(stringBuffer, (char*)str);
	return stringBuffer;
}

// **********************GET DATA SUBROUTINE*****************************************
// This sub-routine picks up and serial string sent to the device and sorts out a power string if there is one
// All values are global, hence nothing is sent/returned

void getData()
{
    // **********GET DATA*******************************************
  // We want to find the bit of interesting data in the serial data stream
  // If we write H then house number then the code will update the house number in EEPROM
  // **** aslo need to write code to update RTC
  
  for(int i = 0; i<10;i++)  // This helps us just take a 'chunk' of data so does not fill up serial buffer
  {
    // get incoming bytes:
    if (Serial.available() > 0) 
    {
     inByte = Serial.read(); 
     str_buffer+=inByte;
    
     if(inByte=='E')    // We read everything up to the byte 'E' which stands for END
     {
       int buffer_length = str_buffer.length();  // We also find the length of the string so we know how many char to display 
       // Depending upon what came before we update different values
       // To change the reference number we enter R00E, where 00 can be any number up to 99 

        for(int i = buffer_length; i>=0; i--)  // Check the buffer from the end of the data, working backwards
        {
          if(str_buffer[i]=='R')
          {
              // In this case we have changed the house number, so UPDATE and store in EEPROM
              deviceID[0]=str_buffer[i+1];
              deviceID[1]=str_buffer[i+2];
              Serial.print(getString(reference));
              Serial.print(deviceID[0]);
              Serial.println(deviceID[1]);
              EEPROM.write(0,deviceID[0]);
              EEPROM.write(1,deviceID[1]);
              initialiseSD();
              createfilename();
          }          
          if(str_buffer[i]=='T')
          {
              // In this case we have changed the TIME, so UPDATE and store to RTC
              // The time is in the format  HHMMSS
              
              String hourstr = str_buffer.substring(i+1,i+3);
              int hour = atoi(&hourstr[0]);
              String minutestr = str_buffer.substring(i+3,i+5);
              int minute = atoi(&minutestr[0]);
              String secondstr = str_buffer.substring(i+5,i+7);
              int second = atoi(&secondstr[0]);
              //hr, min, sec into Real Time Clock
              rtc.setTime(hour, minute, second);

              initialiseSD();
              createfilename();
              
              Serial.println(String(rtc.formatTime())); // Time
          }
          if(str_buffer[i]=='D')
          {
              // In this case we have changed the DATE, so UPDATE and store to RTC
              // The time is in the format  DDMMYY
              
              String daystr = str_buffer.substring(i+1,i+3);
              int day = atoi(&daystr[0]);
              String monthstr = str_buffer.substring(i+3,i+5);
              int month = atoi(&monthstr[0]);          
              String yearstr = str_buffer.substring(i+5,i+7);
              int year = atoi(&yearstr[0]);          
           
              //day, weekday, month, century(1=1900, 0=2000), year(0-99)
              rtc.setDate(day, 3, month, 0, year);
              
              initialiseSD();
              createfilename();
              
              Serial.println(String(rtc.formatDate(RTCC_DATE_WORLD)));
          }           
          if(str_buffer[i]=='S')
          {          
              // In this case we have changed the sample time, so UPDATE and store to EEPROM
              // Data will be in the form of 5 x chars, signifying XXXXX, a value from 00001 to 99999 seconds
              
              sampleTime = atol(&str_buffer[i+1]);  // Convert the string to a long int
              
              EEPROM.write(2, sampleTime >> 8);    // Do this seperately
              EEPROM.write(3, sampleTime & 0xff);
              Serial.print("Sample Time:");
              Serial.println(sampleTime);
              
              dataCounter=0;  // Reset the data counter to start counting again.
          }           
        }
        str_buffer="";  // Reset the buffer to be filled again 
      }
    }
  }
}

